
import React, { useState, useEffect, useCallback } from "react";
import { Land, Selection, User } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { 
  ArrowLeft, 
  MapPin, 
  Thermometer, 
  Droplets, 
  Leaf, 
  IndianRupee,
  User as UserIcon,
  Phone,
  CloudRain,
  Heart,
  CheckCircle
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";

export default function LandDetail() {
  const navigate = useNavigate();
  const [land, setLand] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selecting, setSelecting] = useState(false);
  const [selected, setSelected] = useState(false);
  const [selectionData, setSelectionData] = useState({
    user_notes: "",
    intended_crop: "",
    budget: ""
  });

  const loadLandDetail = useCallback(async () => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const landId = urlParams.get('id');
      
      if (!landId) {
        navigate(createPageUrl("Lands"));
        return;
      }

      const lands = await Land.list();
      const foundLand = lands.find(l => l.id === landId);
      
      if (foundLand) {
        setLand(foundLand);
      } else {
        navigate(createPageUrl("Lands"));
      }
    } catch (error) {
      console.error("Error loading land detail:", error);
      navigate(createPageUrl("Lands"));
    } finally {
      setLoading(false);
    }
  }, [navigate, createPageUrl]);

  useEffect(() => {
    loadLandDetail();
  }, [loadLandDetail]);

  const handleSelection = async () => {
    setSelecting(true);
    try {
      await Selection.create({
        land_id: land.id,
        user_notes: selectionData.user_notes,
        intended_crop: selectionData.intended_crop,
        budget: parseFloat(selectionData.budget) || 0,
        selection_date: new Date().toISOString().split('T')[0],
        status: "interested"
      });
      
      setSelected(true);
      setTimeout(() => {
        navigate(createPageUrl("Summary"));
      }, 2000);
    } catch (error) {
      console.error("Error creating selection:", error);
    } finally {
      setSelecting(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-green-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 mx-auto mb-4 border-4 border-emerald-200 border-t-emerald-600 rounded-full animate-spin"></div>
          <p className="text-emerald-700 font-medium">Loading land details...</p>
        </div>
      </div>
    );
  }

  if (!land) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-green-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">Land not found</p>
          <Button 
            onClick={() => navigate(createPageUrl("Lands"))}
            className="mt-4 bg-emerald-600 hover:bg-emerald-700"
          >
            Back to Lands
          </Button>
        </div>
      </div>
    );
  }

  const soilTypeLabels = {
    black_soil: "Black Soil",
    red_soil: "Red Soil", 
    alluvial: "Alluvial",
    sandy: "Sandy",
    clayey: "Clayey"
  };

  const waterSourceLabels = {
    borewell: "Borewell",
    canal: "Canal",
    river: "River",
    rain_dependent: "Rain Dependent",
    tank: "Tank"
  };

  if (selected) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-green-50 flex items-center justify-center">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className="text-center"
        >
          <div className="w-20 h-20 mx-auto mb-6 bg-green-100 rounded-full flex items-center justify-center">
            <CheckCircle className="w-12 h-12 text-green-600" />
          </div>
          <h2 className="text-3xl font-bold text-gray-900 mb-4">Land Selected Successfully!</h2>
          <p className="text-gray-600 mb-6">Redirecting to your selections summary...</p>
          <div className="w-8 h-8 mx-auto border-4 border-emerald-200 border-t-emerald-600 rounded-full animate-spin"></div>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-lime-50">
      <div className="max-w-6xl mx-auto p-6 lg:p-12">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="outline"
            size="icon"
            onClick={() => navigate(createPageUrl("Lands"))}
            className="border-emerald-200 hover:bg-emerald-50"
          >
            <ArrowLeft className="w-5 h-5" />
          </Button>
          <div>
            <h1 className="text-3xl lg:text-4xl font-bold text-gray-900">{land.title}</h1>
            <div className="flex items-center gap-2 text-gray-600 mt-2">
              <MapPin className="w-5 h-5" />
              <span className="text-lg">{land.location}, {land.district}, {land.state}</span>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Hero Image */}
            <Card className="overflow-hidden shadow-lg border-0">
              <div className="h-64 lg:h-80 bg-gradient-to-br from-emerald-200 to-green-300 relative">
                {land.image_url ? (
                  <img 
                    src={land.image_url} 
                    alt={land.title}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center">
                    <Leaf className="w-24 h-24 text-white opacity-80" />
                  </div>
                )}
                <div className="absolute top-6 right-6">
                  <Badge className="bg-emerald-500 text-white border-0 shadow-lg text-base px-4 py-2">
                    Available
                  </Badge>
                </div>
              </div>
            </Card>

            {/* Key Stats */}
            <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
              <Card className="bg-emerald-50 border-emerald-200">
                <CardContent className="p-6 text-center">
                  <div className="text-3xl font-bold text-emerald-700">{land.size_acres}</div>
                  <div className="text-emerald-600 font-medium">Acres</div>
                </CardContent>
              </Card>
              <Card className="bg-green-50 border-green-200">
                <CardContent className="p-6 text-center">
                  <div className="text-3xl font-bold text-green-700 flex items-center justify-center">
                    <IndianRupee className="w-6 h-6" />
                    {(land.price_per_acre / 1000).toFixed(0)}K
                  </div>
                  <div className="text-green-600 font-medium">Per Acre</div>
                </CardContent>
              </Card>
              <Card className="bg-blue-50 border-blue-200">
                <CardContent className="p-6 text-center">
                  <div className="text-3xl font-bold text-blue-700">{land.current_temperature}°</div>
                  <div className="text-blue-600 font-medium">Current Temp</div>
                </CardContent>
              </Card>
              <Card className="bg-cyan-50 border-cyan-200">
                <CardContent className="p-6 text-center">
                  <div className="text-3xl font-bold text-cyan-700">{land.humidity}%</div>
                  <div className="text-cyan-600 font-medium">Humidity</div>
                </CardContent>
              </Card>
            </div>

            {/* Weather & Soil Details */}
            <Card className="shadow-lg border-0">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Thermometer className="w-6 h-6 text-orange-500" />
                  Weather & Soil Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3">Weather Conditions</h4>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="text-gray-600">Temperature</span>
                        <span className="font-medium">{land.current_temperature}°C</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-gray-600">Humidity</span>
                        <span className="font-medium">{land.humidity}%</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-gray-600">Annual Rainfall</span>
                        <span className="font-medium">{land.rainfall_annual}mm</span>
                      </div>
                    </div>
                  </div>
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3">Land Properties</h4>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="text-gray-600">Soil Type</span>
                        <Badge variant="secondary" className="bg-amber-100 text-amber-800">
                          {soilTypeLabels[land.soil_type]}
                        </Badge>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-gray-600">Water Source</span>
                        <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                          {waterSourceLabels[land.water_source]}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Suitable Crops */}
            {land.suitable_crops && land.suitable_crops.length > 0 && (
              <Card className="shadow-lg border-0">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Leaf className="w-6 h-6 text-green-500" />
                    Recommended Crops
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-3">
                    {land.suitable_crops.map((crop) => (
                      <Badge key={crop} className="bg-green-100 text-green-800 border-green-200 px-4 py-2 text-sm">
                        {crop}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Description */}
            {land.description && (
              <Card className="shadow-lg border-0">
                <CardHeader>
                  <CardTitle>Land Description</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700 leading-relaxed">{land.description}</p>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Owner Contact */}
            <Card className="shadow-lg border-0">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <UserIcon className="w-6 h-6 text-blue-500" />
                  Owner Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label className="text-sm text-gray-600">Owner Name</Label>
                  <p className="font-semibold text-gray-900">{land.owner_name}</p>
                </div>
                <div>
                  <Label className="text-sm text-gray-600">Contact Number</Label>
                  <div className="flex items-center gap-2">
                    <Phone className="w-4 h-4 text-gray-500" />
                    <p className="font-semibold text-gray-900">{land.contact_number}</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Selection Form */}
            <Card className="shadow-lg border-0">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Heart className="w-6 h-6 text-red-500" />
                  Select This Land
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="intended_crop">Intended Crop</Label>
                  <Input
                    id="intended_crop"
                    value={selectionData.intended_crop}
                    onChange={(e) => setSelectionData(prev => ({...prev, intended_crop: e.target.value}))}
                    placeholder="What do you plan to grow?"
                    className="border-emerald-200 focus:border-emerald-400"
                  />
                </div>
                <div>
                  <Label htmlFor="budget">Your Budget (Total)</Label>
                  <Input
                    id="budget"
                    type="number"
                    value={selectionData.budget}
                    onChange={(e) => setSelectionData(prev => ({...prev, budget: e.target.value}))}
                    placeholder="Enter your budget in INR"
                    className="border-emerald-200 focus:border-emerald-400"
                  />
                </div>
                <div>
                  <Label htmlFor="user_notes">Additional Notes</Label>
                  <Textarea
                    id="user_notes"
                    value={selectionData.user_notes}
                    onChange={(e) => setSelectionData(prev => ({...prev, user_notes: e.target.value}))}
                    placeholder="Any specific requirements or questions..."
                    className="border-emerald-200 focus:border-emerald-400 h-24"
                  />
                </div>
                <Button
                  onClick={handleSelection}
                  disabled={selecting}
                  className="w-full bg-gradient-to-r from-emerald-600 to-green-700 hover:from-emerald-700 hover:to-green-800 text-white py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                >
                  {selecting ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                      Selecting Land...
                    </>
                  ) : (
                    <>
                      <Heart className="w-5 h-5 mr-2" />
                      Select This Land
                    </>
                  )}
                </Button>
                <p className="text-xs text-gray-500 text-center">
                  Selecting will add this land to your shortlist for further discussion with the owner.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
