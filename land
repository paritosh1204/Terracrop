
import React, { useState, useEffect, useCallback } from "react";
import { Land } from "@/entities/Land";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Search, Filter, MapPin } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

import LandCard from "../components/land/LandCard";
import LandFilters from "../components/land/LandFilters";

export default function Lands() {
  const [lands, setLands] = useState([]);
  const [filteredLands, setFilteredLands] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [filters, setFilters] = useState({
    state: "all",
    soilType: "all",
    priceRange: "all",
    sizeRange: "all"
  });

  useEffect(() => {
    loadLands();
  }, []);

  const loadLands = async () => {
    try {
      const data = await Land.list("-created_date");
      setLands(data);
    } catch (error) {
      console.error("Error loading lands:", error);
    } finally {
      setLoading(false);
    }
  };

  const filterLands = useCallback(() => {
    let filtered = lands;

    // Search filter
    if (searchQuery) {
      filtered = filtered.filter(land => 
        land.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        land.location?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        land.state?.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // State filter
    if (filters.state !== "all") {
      filtered = filtered.filter(land => land.state === filters.state);
    }

    // Soil type filter
    if (filters.soilType !== "all") {
      filtered = filtered.filter(land => land.soil_type === filters.soilType);
    }

    // Price range filter
    if (filters.priceRange !== "all") {
      const [min, max] = filters.priceRange.split("-").map(Number);
      filtered = filtered.filter(land => {
        const price = land.price_per_acre;
        return max ? price >= min && price <= max : price >= min;
      });
    }

    // Size range filter
    if (filters.sizeRange !== "all") {
      const [min, max] = filters.sizeRange.split("-").map(Number);
      filtered = filtered.filter(land => {
        const size = land.size_acres;
        return max ? size >= min && size <= max : size >= min;
      });
    }

    setFilteredLands(filtered);
  }, [lands, searchQuery, filters]);

  useEffect(() => {
    filterLands();
  }, [filterLands]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-green-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 mx-auto mb-4 border-4 border-emerald-200 border-t-emerald-600 rounded-full animate-spin"></div>
          <p className="text-emerald-700 font-medium">Loading available lands...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-lime-50">
      <div className="max-w-7xl mx-auto p-6 lg:p-12">
        {/* Header */}
        <div className="mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h1 className="text-4xl lg:text-5xl font-bold text-gray-900 mb-4">
              Available <span className="bg-gradient-to-r from-emerald-600 to-green-700 bg-clip-text text-transparent">Farmlands</span>
            </h1>
            <p className="text-xl text-gray-600 max-w-2xl">
              Discover premium agricultural land across India with detailed insights and recommendations.
            </p>
          </motion.div>
        </div>

        {/* Search and Filters */}
        <div className="mb-8 space-y-6">
          <div className="relative">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <Input
              placeholder="Search by location, state, or land title..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-12 py-4 text-lg rounded-xl border-2 border-emerald-100 focus:border-emerald-300 bg-white/80 backdrop-blur-sm"
            />
          </div>

          <LandFilters filters={filters} setFilters={setFilters} />
        </div>

        {/* Results Count */}
        <div className="flex items-center gap-2 mb-6">
          <MapPin className="w-5 h-5 text-emerald-600" />
          <span className="text-gray-700 font-medium">
            {filteredLands.length} land{filteredLands.length !== 1 ? 's' : ''} found
          </span>
        </div>

        {/* Land Grid */}
        <AnimatePresence mode="wait">
          {filteredLands.length > 0 ? (
            <motion.div 
              className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.4 }}
            >
              {filteredLands.map((land, index) => (
                <LandCard
                  key={land.id}
                  land={land}
                  index={index}
                />
              ))}
            </motion.div>
          ) : (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-center py-16"
            >
              <div className="w-24 h-24 mx-auto mb-6 bg-emerald-100 rounded-full flex items-center justify-center">
                <MapPin className="w-12 h-12 text-emerald-500" />
              </div>
              <h3 className="text-2xl font-bold text-gray-700 mb-4">No lands found</h3>
              <p className="text-gray-500 mb-6">Try adjusting your search criteria or filters</p>
              <Button 
                onClick={() => {
                  setSearchQuery("");
                  setFilters({
                    state: "all",
                    soilType: "all", 
                    priceRange: "all",
                    sizeRange: "all"
                  });
                }}
                variant="outline"
                className="border-emerald-300 text-emerald-700 hover:bg-emerald-50"
              >
                Clear All Filters
              </Button>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}
